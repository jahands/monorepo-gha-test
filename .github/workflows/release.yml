name: Release

on:
  push:
    branches: ['main']

env:
  FORCE_COLOR: 1

jobs:
  # test-and-deploy:
  #   name: Test and Deploy
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   concurrency: ${{ github.workflow }}
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #         cache: 'pnpm'
  #     - name: Install Dependencies
  #       run: pnpm install --frozen-lockfile --child-concurrency=10
  #     - name: Check
  #       run: pnpm check:ci
  #     - name: Test
  #       run: pnpm test:ci
  #     - name: Deploy
  #       run: pnpm turbo deploy
  #       env:
  #         CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  #         CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  create-release-pr:
    # For Workers, we always deploy on commits to main.
    # Release PRs are for adding changelogs only (for convenience)
    name: Create Release PR
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency: ${{ github.workflow }}-create-release-pr
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          # cache: 'pnpm'
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --child-concurrency=10 --filter .
      - name: Create Release PR
        id: create-release-pr
        uses: changesets/action@v1
        with:
          publish: |
            echo "Publishing..."
            env
            pnpm changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Print outputs
        run: |
          echo "Outputs: ${{ toJSON(steps.create-release-pr.outputs) }}"

  deploy-versioned-workers:
    name: Deploy Versioned Workers
    if: false
    runs-on: ubuntu-latest
    # This job runs on any push to main. It will determine if versioned packages need deployment.
    # It effectively runs after the PR from 'create-release-pr' is merged.
    permissions:
      contents: read # To read files and perform git diff
    env:
      FORCE_COLOR: 1 # Consistent with other jobs
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # Fetch depth 2 is needed to compare HEAD with HEAD~1 (the previous commit)
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/* # Or your specific Node.js version
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Identify versioned worker packages
        id: versioned_packages
        run: |
          echo "Analyzing commit: ${{ github.sha }}"
          echo "Commit message: ${{ github.event.head_commit.message }}"
          # Get files changed in the push to main (HEAD vs HEAD~1)
          # This works for both merge commits and direct pushes.
          changed_files=$(git diff --name-only HEAD~1 HEAD)

          echo "Files changed in this push to main:"
          echo "$changed_files"

          # Filter for package.json files under apps/ that were modified
          # Assumes worker package names are their directory names under apps/
          worker_package_jsons=$(echo "$changed_files" | grep -E '^apps/[^/]+/package.json$' || true)

          echo "Modified worker package.json files in apps/:"
          echo "$worker_package_jsons"

          if [ -z "$worker_package_jsons" ]; then
            echo "No worker packages under apps/ appear to have been versioned in this push."
            echo "worker_names_json=[]" >> $GITHUB_OUTPUT
            echo "proceed_to_deploy=false" >> $GITHUB_ENV
          else
            # Extract directory names (assumed to be package names for filtering)
            package_names=$(echo "$worker_package_jsons" | sed -E 's_apps/([^/]+)/package.json_\1_')
            echo "Worker package names to deploy:"
            echo "$package_names"
            # Convert to JSON array for easier processing if needed, or direct use in loop
            json_array=$(echo "$package_names" | jq -R . | jq -s .)
            echo "worker_names_json=$json_array" >> $GITHUB_OUTPUT
            echo "proceed_to_deploy=true" >> $GITHUB_ENV
          fi

      - name: Debug versioned packages output
        if: always() # Ensure this runs to see the decision
        run: |
          echo "Proceed to deploy: ${{ env.proceed_to_deploy }}"
          echo "Identified worker names (JSON): ${{ steps.versioned_packages.outputs.worker_names_json }}"

      - name: Deploy Changed Workers
        if: env.proceed_to_deploy == 'true' && steps.versioned_packages.outputs.worker_names_json != '[]'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          # Pass the JSON string of worker names to the script
          WORKER_NAMES_JSON: ${{ steps.versioned_packages.outputs.worker_names_json }}
        run: |
          echo "Deploying workers based on JSON: $WORKER_NAMES_JSON"
          # Use jq to parse the JSON array and iterate
          echo "$WORKER_NAMES_JSON" | jq -r '.[]' | while read worker_name; do
            if [ -n "$worker_name" ]; then
              echo "Deploying worker: $worker_name (filter: $worker_name)"
              # Assumes 'deploy' is a script in your root package.json managed by Turborepo,
              # and Turborepo can filter by package name (directory name).
              # The project overview mentions `just deploy` uses `pnpm turbo deploy`.
              pnpm turbo run deploy --filter="$worker_name"
            else
              echo "Skipping empty worker name in deployment loop."
            fi
          done
          echo "All selected workers processed for deployment."
