name: Release

on:
  push:
    branches: ['main']

env:
  FORCE_COLOR: 1

jobs:
  # test-and-deploy:
  #   name: Test and Deploy
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   concurrency: ${{ github.workflow }}
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #         cache: 'pnpm'
  #     - name: Install Dependencies
  #       run: pnpm install --frozen-lockfile --child-concurrency=10
  #     - name: Check
  #       run: pnpm check:ci
  #     - name: Test
  #       run: pnpm test:ci
  #     - name: Deploy
  #       run: pnpm turbo deploy
  #       env:
  #         CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  #         CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency: ${{ github.workflow }}-create-release-pr
    permissions:
      contents: write
      pull-requests: write
      actions: write
    outputs:
      published: ${{ steps.create-release-pr.outputs.published }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          # cache: 'pnpm'
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --child-concurrency=10 --filter .
      - name: Create Release PR
        id: create-release-pr
        uses: changesets/action@v1
        with:
          publish: pnpm changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      - name: Get Latest Commit SHA
        if: steps.create-release-pr.outputs.hasChangesets == 'true'
        id: get-sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Trigger Main Workflow Deploy
        if: steps.create-release-pr.outputs.hasChangesets == 'true'
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/check-runs \
            -d '{
              "name": "Branches Workflow",
              "head_sha": "${{ github.sha }}",
              "status": "in_progress",
              "external_id": "branches-workflow-${{ github.sha }}",
              "details_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      - name: Save Published Packages
        if: steps.create-release-pr.outputs.published == 'true'
        run: |
          echo '${{steps.create-release-pr.outputs.publishedPackages}}' \
            > ${{ github.workspace }}/published-packages.json
      - name: Upload Published Packages
        if: steps.create-release-pr.outputs.published == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: published-packages
          path: ${{ github.workspace }}/published-packages.json

  deploy:
    name: Deploy
    needs: create-release-pr
    if: needs.create-release-pr.outputs.published == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Download published packages
        uses: actions/download-artifact@v4
        with:
          name: published-packages
          path: ${{ runner.temp }}
      - uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          # cache: 'pnpm'
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --child-concurrency=10
      - name: Deploy
        run: pnpm runx deploy-workers-production
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
